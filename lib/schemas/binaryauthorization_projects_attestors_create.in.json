{
    "type": "object",
    "properties": {
        "attestorId": {
            "type": "string"
        },
        "parent": {
            "required": true,
            "type": "string"
        },
        "alt": {
            "type": "string",
            "enum": [
                "json",
                "media",
                "proto"
            ],
            "default": "json"
        },
        "callback": {
            "type": "string"
        },
        "fields": {
            "type": "string"
        },
        "key": {
            "type": "string"
        },
        "oauth_token": {
            "type": "string"
        },
        "prettyPrint": {
            "type": "boolean",
            "default": true
        },
        "quotaUser": {
            "type": "string"
        },
        "uploadType": {
            "type": "string"
        },
        "upload_protocol": {
            "type": "string"
        },
        "requestBody": {
            "description": "An attestor that attests to container image\nartifacts. An existing attestor cannot be modified except where\nindicated.",
            "properties": {
                "description": {
                    "description": "Optional. A descriptive comment.  This field may be updated.\nThe field may be displayed in chooser dialogs.",
                    "type": "string"
                },
                "name": {
                    "description": "Required. The resource name, in the format:\n`projects/*/attestors/*`. This field may not be updated.",
                    "type": "string"
                },
                "updateTime": {
                    "description": "Output only. Time when the attestor was last updated.",
                    "format": "google-datetime",
                    "type": "string"
                },
                "userOwnedDrydockNote": {
                    "description": "A Drydock ATTESTATION_AUTHORITY Note, created by the user.",
                    "properties": {
                        "delegationServiceAccountEmail": {
                            "description": "Output only. This field will contain the service account email address\nthat this Attestor will use as the principal when querying Container\nAnalysis. Attestor administrators must grant this service account the\nIAM role needed to read attestations from the note_reference in\nContainer Analysis (`containeranalysis.notes.occurrences.viewer`).\n\nThis email address is fixed for the lifetime of the Attestor, but callers\nshould not make any other assumptions about the service account email;\nfuture versions may use an email based on a different naming pattern.",
                            "type": "string"
                        },
                        "noteReference": {
                            "description": "Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note,\ncreated by the user, in the format: `projects/*/notes/*` (or the legacy\n`providers/*/notes/*`). This field may not be updated.\n\nAn attestation by this attestor is stored as a Drydock\nATTESTATION_AUTHORITY Occurrence that names a container image and that\nlinks to this Note. Drydock is an external dependency.",
                            "type": "string"
                        },
                        "publicKeys": {
                            "description": "Optional. Public keys that verify attestations signed by this\nattestor.  This field may be updated.\n\nIf this field is non-empty, one of the specified public keys must\nverify that an attestation was signed by this attestor for the\nimage specified in the admission request.\n\nIf this field is empty, this attestor always returns that no\nvalid attestations exist.",
                            "items": {
                                "description": "An attestor public key that will be used to verify\nattestations signed by this attestor.",
                                "properties": {
                                    "asciiArmoredPgpPublicKey": {
                                        "description": "ASCII-armored representation of a PGP public key, as the entire output by\nthe command `gpg --export --armor foo@example.com` (either LF or CRLF\nline endings).\nWhen using this field, `id` should be left blank.  The BinAuthz API\nhandlers will calculate the ID and fill it in automatically.  BinAuthz\ncomputes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as\nupper-case hex.  If `id` is provided by the caller, it will be\noverwritten by the API-calculated ID.",
                                        "type": "string"
                                    },
                                    "comment": {
                                        "description": "Optional. A descriptive comment. This field may be updated.",
                                        "type": "string"
                                    },
                                    "id": {
                                        "description": "The ID of this public key.\nSignatures verified by BinAuthz must include the ID of the public key that\ncan be used to verify them, and that ID must match the contents of this\nfield exactly.\nAdditional restrictions on this field can be imposed based on which public\nkey type is encapsulated. See the documentation on `public_key` cases below\nfor details.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    }
}